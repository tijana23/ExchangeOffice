//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExchangeOffice
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExchangeOfficeEntities : DbContext
    {
        public ExchangeOfficeEntities()
            : base("name=ExchangeOfficeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int DeleteFromUsers(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFromUsers", idParameter);
        }
    
        public virtual int InsertIntoUsers(string name, string surname, Nullable<int> isActive)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoUsers", nameParameter, surnameParameter, isActiveParameter);
        }
    
        public virtual int Loan_payment(Nullable<double> amount, Nullable<double> interestRate, Nullable<double> numberOfInstallments)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(double));
    
            var numberOfInstallmentsParameter = numberOfInstallments.HasValue ?
                new ObjectParameter("NumberOfInstallments", numberOfInstallments) :
                new ObjectParameter("NumberOfInstallments", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Loan_payment", amountParameter, interestRateParameter, numberOfInstallmentsParameter);
        }
    
        public virtual ObjectResult<LoanP_Result> LoanP(Nullable<double> amount, Nullable<double> interestRate, Nullable<int> numberOfInstallments, Nullable<int> day, string month, Nullable<int> year)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(double));
    
            var numberOfInstallmentsParameter = numberOfInstallments.HasValue ?
                new ObjectParameter("NumberOfInstallments", numberOfInstallments) :
                new ObjectParameter("NumberOfInstallments", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoanP_Result>("LoanP", amountParameter, interestRateParameter, numberOfInstallmentsParameter, dayParameter, monthParameter, yearParameter);
        }
    
        public virtual int PopulateOperations(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PopulateOperations", idParameter);
        }
    
        public virtual ObjectResult<TDA_Result> TDA(Nullable<double> amount, Nullable<double> interestRate, Nullable<int> periodInYears, Nullable<int> day, string month, Nullable<int> year)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(double));
    
            var periodInYearsParameter = periodInYears.HasValue ?
                new ObjectParameter("PeriodInYears", periodInYears) :
                new ObjectParameter("PeriodInYears", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TDA_Result>("TDA", amountParameter, interestRateParameter, periodInYearsParameter, dayParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<TDA_calc_Result> TDA_calc(Nullable<double> amount, Nullable<double> interestRate, Nullable<int> periodInYears, Nullable<int> day, string month, Nullable<int> year)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(double));
    
            var periodInYearsParameter = periodInYears.HasValue ?
                new ObjectParameter("PeriodInYears", periodInYears) :
                new ObjectParameter("PeriodInYears", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TDA_calc_Result>("TDA_calc", amountParameter, interestRateParameter, periodInYearsParameter, dayParameter, monthParameter, yearParameter);
        }
    
        public virtual int TDA_calculation(Nullable<int> amount, Nullable<int> interest, Nullable<int> period)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TDA_calculation", amountParameter, interestParameter, periodParameter);
        }
    }
}
