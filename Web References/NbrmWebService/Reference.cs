//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ExchangeOffice.NbrmWebService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="KursSoap", Namespace="https://www.nbrm.mk/klservice/")]
    public partial class Kurs : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetExchangeRateDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRatesDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRatesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Kurs() {
            this.Url = global::ExchangeOffice.Properties.Settings.Default.ExchangeOffice_NbrmWebService_Kurs;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetExchangeRateDCompletedEventHandler GetExchangeRateDCompleted;
        
        /// <remarks/>
        public event GetExchangeRateCompletedEventHandler GetExchangeRateCompleted;
        
        /// <remarks/>
        public event GetExchangeRatesDCompletedEventHandler GetExchangeRatesDCompleted;
        
        /// <remarks/>
        public event GetExchangeRatesCompletedEventHandler GetExchangeRatesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.nbrm.mk/klservice/GetExchangeRateD", RequestNamespace="https://www.nbrm.mk/klservice/", ResponseNamespace="https://www.nbrm.mk/klservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExchangeRateD(System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetExchangeRateD", new object[] {
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateDAsync(System.DateTime StartDate, System.DateTime EndDate) {
            this.GetExchangeRateDAsync(StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateDAsync(System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetExchangeRateDOperationCompleted == null)) {
                this.GetExchangeRateDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateDOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateD", new object[] {
                        StartDate,
                        EndDate}, this.GetExchangeRateDOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateDOperationCompleted(object arg) {
            if ((this.GetExchangeRateDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateDCompleted(this, new GetExchangeRateDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.nbrm.mk/klservice/GetExchangeRate", RequestNamespace="https://www.nbrm.mk/klservice/", ResponseNamespace="https://www.nbrm.mk/klservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExchangeRate(string StartDate, string EndDate) {
            object[] results = this.Invoke("GetExchangeRate", new object[] {
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateAsync(string StartDate, string EndDate) {
            this.GetExchangeRateAsync(StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetExchangeRateAsync(string StartDate, string EndDate, object userState) {
            if ((this.GetExchangeRateOperationCompleted == null)) {
                this.GetExchangeRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRate", new object[] {
                        StartDate,
                        EndDate}, this.GetExchangeRateOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateOperationCompleted(object arg) {
            if ((this.GetExchangeRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateCompleted(this, new GetExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.nbrm.mk/klservice/GetExchangeRatesD", RequestNamespace="https://www.nbrm.mk/klservice/", ResponseNamespace="https://www.nbrm.mk/klservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExchangeRatesD(System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("GetExchangeRatesD", new object[] {
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRatesDAsync(System.DateTime StartDate, System.DateTime EndDate) {
            this.GetExchangeRatesDAsync(StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetExchangeRatesDAsync(System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.GetExchangeRatesDOperationCompleted == null)) {
                this.GetExchangeRatesDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRatesDOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRatesD", new object[] {
                        StartDate,
                        EndDate}, this.GetExchangeRatesDOperationCompleted, userState);
        }
        
        private void OnGetExchangeRatesDOperationCompleted(object arg) {
            if ((this.GetExchangeRatesDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRatesDCompleted(this, new GetExchangeRatesDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.nbrm.mk/klservice/GetExchangeRates", RequestNamespace="https://www.nbrm.mk/klservice/", ResponseNamespace="https://www.nbrm.mk/klservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExchangeRates(string StartDate, string EndDate) {
            object[] results = this.Invoke("GetExchangeRates", new object[] {
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRatesAsync(string StartDate, string EndDate) {
            this.GetExchangeRatesAsync(StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetExchangeRatesAsync(string StartDate, string EndDate, object userState) {
            if ((this.GetExchangeRatesOperationCompleted == null)) {
                this.GetExchangeRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRatesOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRates", new object[] {
                        StartDate,
                        EndDate}, this.GetExchangeRatesOperationCompleted, userState);
        }
        
        private void OnGetExchangeRatesOperationCompleted(object arg) {
            if ((this.GetExchangeRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRatesCompleted(this, new GetExchangeRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetExchangeRateDCompletedEventHandler(object sender, GetExchangeRateDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetExchangeRateCompletedEventHandler(object sender, GetExchangeRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetExchangeRatesDCompletedEventHandler(object sender, GetExchangeRatesDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRatesDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRatesDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetExchangeRatesCompletedEventHandler(object sender, GetExchangeRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591